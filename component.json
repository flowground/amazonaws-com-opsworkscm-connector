{
    "title": "AWS OpsWorks for Chef Automate",
    "description": "AWS OpsWorks CM AWS OpsWorks for configuration management (CM) is a service that\nruns and manages configuration management servers. You can use AWS OpsWorks CM\nto create and manage AWS OpsWorks for Chef Automate and AWS OpsWorks for Puppet\nEnterprise servers, and add or remove nodes for the servers to manage.\n\n Glossary of terms \n\n *   Server: A configuration management server that can be highly-available. The\n   configuration management server runs on an Amazon Elastic Compute Cloud (EC2)\n   instance, and may use various other AWS services, such as Amazon Relational\n   Database Service (RDS) and Elastic Load Balancing. A server is a generic\n   abstraction over the configuration manager that you want to use, much like\n   Amazon RDS. In AWS OpsWorks CM, you do not start or stop servers. After you\n   create servers, they continue to run until they are deleted.\n   \n   \n *   Engine: The engine is the specific configuration manager that you want to\n   use. Valid values in this release include Chef and Puppet.\n   \n   \n *   Backup: This is an application-level backup of the data that the\n   configuration manager stores. AWS OpsWorks CM creates an S3 bucket for\n   backups when you launch the first server. A backup maintains a snapshot of a\n   server's configuration-related attributes at the time the backup starts.\n   \n   \n *   Events: Events are always related to a server. Events are written during\n   server creation, when health checks run, when backups are created, when\n   system maintenance is performed, etc. When you delete a server, the server's\n   events are also deleted.\n   \n   \n *   Account attributes: Every account has attributes that are assigned in the\n   AWS OpsWorks CM database. These attributes store information about\n   configuration limits (servers, backups, etc.) and your customer account. \n   \n   \n\n Endpoints \n\nAWS OpsWorks CM supports the following endpoints, all HTTPS. You must connect to\none of the following endpoints. Your servers can only be accessed or managed\nwithin the endpoint in which they are created.\n\n *  opsworks-cm.us-east-1.amazonaws.com\n   \n   \n *  opsworks-cm.us-east-2.amazonaws.com\n   \n   \n *  opsworks-cm.us-west-1.amazonaws.com\n   \n   \n *  opsworks-cm.us-west-2.amazonaws.com\n   \n   \n *  opsworks-cm.ap-northeast-1.amazonaws.com\n   \n   \n *  opsworks-cm.ap-southeast-1.amazonaws.com\n   \n   \n *  opsworks-cm.ap-southeast-2.amazonaws.com\n   \n   \n *  opsworks-cm.eu-central-1.amazonaws.com\n   \n   \n *  opsworks-cm.eu-west-1.amazonaws.com\n   \n   \n\n Throttling limits \n\nAll API operations allow for five requests per second with a burst of 10\nrequests per second.",
    "docsUrl": "https://docs.aws.amazon.com/opsworks-cm/",
    "url": "https://api.apis.guru/v2/specs/amazonaws.com/opsworkscm/2016-11-01/swagger.json",
    "envVars": {},
    "credentials": {
        "fields": {
            "server": {
                "label": "Server",
                "viewClass": "SelectView",
                "model": [
                    "https://opsworks-cm.amazonaws.com/",
                    "http://opsworks-cm.amazonaws.com/",
                    "--- Custom URL"
                ],
                "required": true
            },
            "otherServer": {
                "label": "Custom Server URL",
                "viewClass": "TextFieldView"
            },
            "auth_hmac": {
                "label": "Authorization (hmac)",
                "viewClass": "TextFieldView",
                "note": "Amazon Signature authorization v4"
            }
        }
    },
    "triggers": {
        "startFlow": {
            "main": "./lib/triggers/startFlow.js",
            "type": "polling",
            "title": "Start Flow",
            "fields": {}
        }
    },
    "actions": {
        "AssociateNode": {
            "main": "./lib/actions/AssociateNode.js",
            "title": "AssociateNode",
            "description": " Associates a new node with the server. For more information about how to\ndisassociate a node, see DisassociateNode.\n\n On a Chef server: This command is an alternative to knife bootstrap.\n\n Example (Chef): aws opsworks-cm associate-node --server-name MyServer \n--node-name MyManagedNode --engine-attributes \"Name=CHEF_ORGANIZATION\n,Value=default\" \"Name=CHEF_NODE_PUBLIC_KEY,Value=public-key-pem\" \n\n On a Puppet server, this command is an alternative to the puppet cert sign \ncommand that signs a Puppet node CSR. \n\n Example (Chef): aws opsworks-cm associate-node --server-name MyServer \n--node-name MyManagedNode --engine-attributes \"Name=PUPPET_NODE_CSR,Value=\ncsr-pem\" \n\n A node can can only be associated with servers that are in a HEALTHY state.\nOtherwise, an InvalidStateException is thrown. A ResourceNotFoundException is\nthrown when the server does not exist. A ValidationException is raised when\nparameters of the request are not valid. The AssociateNode API call can be\nintegrated into Auto Scaling configurations, AWS Cloudformation templates, or\nthe user data of a server's instance.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/AssociateNode.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateBackup": {
            "main": "./lib/actions/CreateBackup.js",
            "title": "CreateBackup",
            "description": " Creates an application-level backup of a server. While the server is in the \nBACKING_UP state, the server cannot be changed, and no additional backup can be\ncreated. \n\n Backups can be created for servers in RUNNING, HEALTHY, and UNHEALTHY states.\nBy default, you can create a maximum of 50 manual backups. \n\n This operation is asynchronous. \n\n A LimitExceededException is thrown when the maximum number of manual backups is\nreached. An InvalidStateException is thrown when the server is not in any of the\nfollowing states: RUNNING, HEALTHY, or UNHEALTHY. A ResourceNotFoundException is\nthrown when the server is not found. A ValidationException is thrown when\nparameters of the request are not valid.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateBackup.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateServer": {
            "main": "./lib/actions/CreateServer.js",
            "title": "CreateServer",
            "description": " Creates and immedately starts a new server. The server is ready to use when it\nis in the HEALTHY state. By default, you can create a maximum of 10 servers. \n\n This operation is asynchronous. \n\n A LimitExceededException is thrown when you have created the maximum number of\nservers (10). A ResourceAlreadyExistsException is thrown when a server with the\nsame name already exists in the account. A ResourceNotFoundException is thrown\nwhen you specify a backup ID that is not valid or is for a backup that does not\nexist. A ValidationException is thrown when parameters of the request are not\nvalid. \n\n If you do not specify a security group by adding the SecurityGroupIds \nparameter, AWS OpsWorks creates a new security group. \n\n Chef Automate: The default security group opens the Chef server to the world on\nTCP port 443. If a KeyName is present, AWS OpsWorks enables SSH access. SSH is\nalso open to the world on TCP port 22. \n\n Puppet Enterprise: The default security group opens TCP ports 22, 443, 4433,\n8140, 8142, 8143, and 8170. If a KeyName is present, AWS OpsWorks enables SSH\naccess. SSH is also open to the world on TCP port 22. \n\nBy default, your server is accessible from any IP address. We recommend that you\nupdate your security group rules to allow access from known IP addresses and\naddress ranges only. To edit security group rules, open Security Groups in the\nnavigation pane of the EC2 management console.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateServer.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteBackup": {
            "main": "./lib/actions/DeleteBackup.js",
            "title": "DeleteBackup",
            "description": " Deletes a backup. You can delete both manual and automated backups. This\noperation is asynchronous. \n\n An InvalidStateException is thrown when a backup deletion is already in\nprogress. A ResourceNotFoundException is thrown when the backup does not exist.\nA ValidationException is thrown when parameters of the request are not valid.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteBackup.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteServer": {
            "main": "./lib/actions/DeleteServer.js",
            "title": "DeleteServer",
            "description": " Deletes the server and the underlying AWS CloudFormation stacks (including the\nserver's EC2 instance). When you run this command, the server state is updated\nto DELETING. After the server is deleted, it is no longer returned by \nDescribeServer requests. If the AWS CloudFormation stack cannot be deleted, the\nserver cannot be deleted. \n\n This operation is asynchronous. \n\n An InvalidStateException is thrown when a server deletion is already in\nprogress. A ResourceNotFoundException is thrown when the server does not exist.\nA ValidationException is raised when parameters of the request are not valid.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteServer.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeAccountAttributes": {
            "main": "./lib/actions/DescribeAccountAttributes.js",
            "title": "DescribeAccountAttributes",
            "description": " Describes your account attributes, and creates requests to increase limits\nbefore they are reached or exceeded. \n\n This operation is synchronous.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeAccountAttributes.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeBackups": {
            "main": "./lib/actions/DescribeBackups.js",
            "title": "DescribeBackups",
            "description": " Describes backups. The results are ordered by time, with newest backups first.\nIf you do not specify a BackupId or ServerName, the command returns all backups. \n\n This operation is synchronous. \n\n A ResourceNotFoundException is thrown when the backup does not exist. A \nValidationException is raised when parameters of the request are not valid.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeBackups.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeEvents": {
            "main": "./lib/actions/DescribeEvents.js",
            "title": "DescribeEvents",
            "description": " Describes events for a specified server. Results are ordered by time, with\nnewest events first. \n\n This operation is synchronous. \n\n A ResourceNotFoundException is thrown when the server does not exist. A \nValidationException is raised when parameters of the request are not valid.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeEvents.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeNodeAssociationStatus": {
            "main": "./lib/actions/DescribeNodeAssociationStatus.js",
            "title": "DescribeNodeAssociationStatus",
            "description": " Returns the current status of an existing association or disassociation\nrequest. \n\n A ResourceNotFoundException is thrown when no recent association or\ndisassociation request with the specified token is found, or when the server\ndoes not exist. A ValidationException is raised when parameters of the request\nare not valid.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeNodeAssociationStatus.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeServers": {
            "main": "./lib/actions/DescribeServers.js",
            "title": "DescribeServers",
            "description": " Lists all configuration management servers that are identified with your\naccount. Only the stored results from Amazon DynamoDB are returned. AWS OpsWorks\nCM does not query other services. \n\n This operation is synchronous. \n\n A ResourceNotFoundException is thrown when the server does not exist. A \nValidationException is raised when parameters of the request are not valid.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeServers.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DisassociateNode": {
            "main": "./lib/actions/DisassociateNode.js",
            "title": "DisassociateNode",
            "description": " Disassociates a node from an AWS OpsWorks CM server, and removes the node from\nthe server's managed nodes. After a node is disassociated, the node key pair is\nno longer valid for accessing the configuration manager's API. For more\ninformation about how to associate a node, see AssociateNode. \n\nA node can can only be disassociated from a server that is in a HEALTHY state.\nOtherwise, an InvalidStateException is thrown. A ResourceNotFoundException is\nthrown when the server does not exist. A ValidationException is raised when\nparameters of the request are not valid.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DisassociateNode.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ExportServerEngineAttribute": {
            "main": "./lib/actions/ExportServerEngineAttribute.js",
            "title": "ExportServerEngineAttribute",
            "description": " Exports a specified server engine attribute as a base64-encoded string. For\nexample, you can export user data that you can use in EC2 to associate nodes\nwith a server. \n\n This operation is synchronous. \n\n A ValidationException is raised when parameters of the request are not valid. A \nResourceNotFoundException is thrown when the server does not exist. An \nInvalidStateException is thrown when the server is in any of the following\nstates: CREATING, TERMINATED, FAILED or DELETING.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ExportServerEngineAttribute.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "RestoreServer": {
            "main": "./lib/actions/RestoreServer.js",
            "title": "RestoreServer",
            "description": " Restores a backup to a server that is in a CONNECTION_LOST, HEALTHY, RUNNING, \nUNHEALTHY, or TERMINATED state. When you run RestoreServer, the server's EC2\ninstance is deleted, and a new EC2 instance is configured. RestoreServer\nmaintains the existing server endpoint, so configuration management of the\nserver's client devices (nodes) should continue to work. \n\n This operation is asynchronous. \n\n An InvalidStateException is thrown when the server is not in a valid state. A \nResourceNotFoundException is thrown when the server does not exist. A \nValidationException is raised when parameters of the request are not valid.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/RestoreServer.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "StartMaintenance": {
            "main": "./lib/actions/StartMaintenance.js",
            "title": "StartMaintenance",
            "description": " Manually starts server maintenance. This command can be useful if an earlier\nmaintenance attempt failed, and the underlying cause of maintenance failure has\nbeen resolved. The server is in an UNDER_MAINTENANCE state while maintenance is\nin progress. \n\n Maintenance can only be started on servers in HEALTHY and UNHEALTHY states.\nOtherwise, an InvalidStateException is thrown. A ResourceNotFoundException is\nthrown when the server does not exist. A ValidationException is raised when\nparameters of the request are not valid.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/StartMaintenance.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateServer": {
            "main": "./lib/actions/UpdateServer.js",
            "title": "UpdateServer",
            "description": " Updates settings for a server. \n\n This operation is synchronous.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateServer.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateServerEngineAttributes": {
            "main": "./lib/actions/UpdateServerEngineAttributes.js",
            "title": "UpdateServerEngineAttributes",
            "description": " Updates engine-specific attributes on a specified server. The server enters the \nMODIFYING state when this operation is in progress. Only one update can occur at\na time. You can use this command to reset a Chef server's public key (\nCHEF_PIVOTAL_KEY) or a Puppet server's admin password (PUPPET_ADMIN_PASSWORD). \n\n This operation is asynchronous. \n\n This operation can only be called for servers in HEALTHY or UNHEALTHY states.\nOtherwise, an InvalidStateException is raised. A ResourceNotFoundException is\nthrown when the server does not exist. A ValidationException is raised when\nparameters of the request are not valid.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateServerEngineAttributes.in.json",
                "out": {
                    "type": "object"
                }
            }
        }
    }
}